; If n is prime and 0 < a < n => a^(n) = a (mod n)
; If n is prime and 0 < a < n => a^(n-1) = 1 (mod n)
; If there is a non trivial square root of 1 (mod n) => n is not prime

; n is prime <=> the solutions of x^2 = 1 (mod n) are -1 and 1

(define (expmod base exp n)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) n))
                    n))
        (else
         (remainder (* base (expmod base (- exp 1) n))
                    n))))

(define (even? n)
  (= (remainder n 2) 0))

(define (miller-rabin-test n)
  (define (try-it a)
    (= (expmod a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((miller-rabin-test n) (fast-prime? n (- times 1)))
        (else false)))

; (fast-prime? 561 1)
;   (miller-rabin-test 561)
;     (try-it 2)
;       (= (expmod 2 (- 561 1) 561) 1)
;       (= (expmod 2 560 561) 1)
;       (= (remainder (square (expmod 2 280 561)) 561) 1)
;       (= (remainder (square (remainder (square (expmod 2 140 561)) 561)) 561) 1)
; ...

; (fast-prime? 5 1)
;   (miller-rabin-test 5)
;     (try-it 2)
;       (= (expmod 2 4 1) 5) 1)
;       (= (remainder (square (expmod 2 2 5)) 5) 1)
;       (= (remainder (square (remainder (square (expmod 2 1 5)) 5)) 5) 1)
;       (= (remainder (square (remainder (square (remainder (* 2 (expmod 2 0 5)))) 5)) 5) 1)
;       (= (remainder (square (remainder (square (remainder (* 2 1))) 5)) 5) 1)
;       (= (remainder (square (remainder (square (remainder 2 5)) 5)) 5) 1)
;       (= (remainder (square (remainder (square 2) 5)) 5) 1)
;       (= (remainder (square (remainder 4 5)) 5) 1)
;       (= (remainder (square 4) 5) 1)
;       (= (remainder 16 5) 1)
;       (= 1 1)

; (fast-prime? 7 1)
;   (miller-rabin-test 7)
;     (try-it 2)
;       (= (expmod 2 6 1) 7) 1)
;       (= (remainder (square (expmod 2 3 7)) 7) 1)
;       (= (remainder (square (remainder (* 2 (expmod 2 2 7)) 7)) 7) 1)
;       (= (remainder (square (remainder (* 2 (remainder (square (expmod 2 1 7)) 7)) 7)) 7) 1)
;       (= (remainder (square (remainder (* 2 (remainder (square (remainder (* 2 (expmod 2 0 7)) 7)) 7)) 7)) 7) 1)
;       (= (remainder (square (remainder (* 2 (remainder (square (remainder (* 2 1) 7)) 7)) 7)) 7) 1)
;       (= (remainder (square (remainder (* 2 (remainder (square (remainder 2 7)) 7)) 7)) 7) 1)
;       (= (remainder (square (remainder (* 2 (remainder (square 2) 7)) 7)) 7) 1)
;       (= (remainder (square (remainder (* 2 (remainder 4 7)) 7)) 7) 1)
;       (= (remainder (square (remainder (* 2 4) 7)) 7) 1)
;       (= (remainder (square (remainder 8 7)) 7) 1)
;       (= (remainder (square 1) 7) 1)
;       (= (remainder 1 7) 1)
;       (= 1 1)

; (fast-prime? 10 1)
;   (miller-rabin-test 10)
;     (try-it 2)
;       (= (expmod 2 9 1) 10) 1)
;       (= (remainder (* 2 (expmod 2 8 10)) 10) 1)
;       (= (remainder (* 2 (remainder (square (expmod 2 4 10)) 10)) 10) 1)
;       (= (remainder (* 2 (remainder (square (remainder (square (expmod 2 2 10)) 10)) 10)) 10) 1)
;       (= (remainder (* 2 (remainder (square (remainder (square (remainder (square (expmod 2 1 10)) 10)) 10)) 10)) 10) 1)
;       (= (remainder (* 2 (remainder (square (remainder (square (remainder (square (remainder (* 2 (expmod 2 0 10)) 10)) 10)) 10)) 10)) 10) 1)
;       (= (remainder (* 2 (remainder (square (remainder (square (remainder (square (remainder (* 2 1) 10)) 10)) 10)) 10)) 10) 1)
;       (= (remainder (* 2 (remainder (square (remainder (square (remainder (square (remainder 2 10)) 10)) 10)) 10)) 10) 1)
;       (= (remainder (* 2 (remainder (square (remainder (square (remainder (square 2) 10)) 10)) 10)) 10) 1)
;       (= (remainder (* 2 (remainder (square (remainder (square (remainder 4 10)) 10)) 10)) 10) 1)
;       (= (remainder (* 2 (remainder (square (remainder (square 4) 10)) 10)) 10) 1)
;       (= (remainder (* 2 (remainder (square (remainder 16 10)) 10)) 10) 1)
;       (= (remainder (* 2 (remainder (square 6) 10)) 10) 1)
;       (= (remainder (* 2 (remainder 36 10)) 10) 1)
;       (= (remainder (* 2 6) 10) 1)
;       (= (remainder 12 10) 1)
;       (= 2 1)

; I don't know the required maths for the algorithm.
; I copy herein a solution I found at: https://codology.net/post/sicp-solution-exercise-1-28/

(define (fool-remainder-square-checked x m)
  (remainder (* x x) m))

(define (remainder-square-checked x m)
  (if (and (not (or (= x 1)
                    (= x (- m 1))))
           (= (remainder (* x x) m) 1))
      0
      (remainder (* x x) m)))

(define (expmod-checked base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder-square-checked (expmod-checked base (/ exp 2) m) m))
        (else
         (remainder (* base (expmod-checked base (- exp 1) m))
                    m))))

(define (fool-expmod-checked base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (fool-remainder-square-checked (fool-expmod-checked base (/ exp 2) m) m))
        (else
         (remainder (* base (fool-expmod-checked base (- exp 1) m))
                    m))))

(define (miller-rabin-test n)
  (define (try-it a)
    (= (expmod-checked a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 1)))))

(define (miller-rabin-prime?  n times)
  (cond ((= times 0) #t)
        ((miller-rabin-test n)
         (miller-rabin-prime? n (- times 1)))
        (else #f)))

(define (assert-result test-name actual expected)
  (display (if (eq? actual expected) "pass: " "fail: "))
  (display test-name)
  (newline))

(assert-result "   2 is prime"      (miller-rabin-prime?    2 10) #t)
(assert-result "1009 is prime"      (miller-rabin-prime? 1009 10) #t)
(assert-result "   4 is not prime"  (miller-rabin-prime?    4 10) #f)
(assert-result "  99 is not prime"  (miller-rabin-prime?   99 10) #f)
(assert-result " 561 is not prime " (miller-rabin-prime?  561 1) #f) ; (Carmichael number)
(assert-result "1105 is not prime " (miller-rabin-prime?  561 1) #f) ; (Carmichael number)

(define (fool-miller-rabin-prime? n)
  (define (fool-miller-rabin-iter m n)
    (define (try-it a)
	  ;(display "try-it ") (display a) (display " ") (display n) (newline)
	  (= (fool-expmod-checked a (- n 1) n) 1))
	;(display "fool-miller-rabin-iter ") (display m) (display " ") (display n) (newline)
	(or (= n 2)
	    (= m n)
	    (try-it (+ 1 m))))
  (fool-miller-rabin-iter 1 n))

(newline)
(assert-result "   2 is prime"      (fool-miller-rabin-prime?    2) #t)
(assert-result "1009 is prime"      (fool-miller-rabin-prime? 1009) #t)
(assert-result "   4 is not prime"  (fool-miller-rabin-prime?    4) #f)
(assert-result "  99 is not prime"  (fool-miller-rabin-prime?   99) #f)
(assert-result " 561 is not prime " (fool-miller-rabin-prime?  561) #f) ; (Carmichael number)
(assert-result "1105 is not prime " (fool-miller-rabin-prime?  561) #f) ; (Carmichael number)
